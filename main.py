from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import requests
import os
from dotenv import load_dotenv
import openai

load_dotenv()

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

APPTWEAK_API_KEY = os.getenv("APPTWEAK_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

class AppInfo(BaseModel):
    app_id: str
    app_store: str
    country: str = "US"
    competitors: list[str] = []
    keywords: list[str] = []

@app.get("/")
def read_root():
    return {"message": "ASO AI Agent API is running. Visit /docs for Swagger UI."}

@app.post("/analyze")
def analyze_app(info: AppInfo):
    if info.app_store.lower() == "apple":
        url = f"https://itunes.apple.com/lookup?id={info.app_id}" if info.app_id.isdigit() else f"https://itunes.apple.com/lookup?bundleId={info.app_id}"
        response = requests.get(url)
        data = response.json()
        if data.get("resultCount", 0) > 0:
            app_data = data["results"][0]
            return {
                "app_id": info.app_id,
                "store": "apple",
                "title": app_data.get("trackName"),
                "developer": app_data.get("sellerName"),
                "rating": app_data.get("averageUserRating"),
                "description": app_data.get("description"),
                "icon": app_data.get("artworkUrl100"),
                "status": "Success"
            }
        return {"status": "App not found on iTunes", "app_id": info.app_id}

    elif info.app_store.lower() == "google":
        try:
            url = f"https://play.google.com/store/apps/details?id={info.app_id}&hl=en&gl={info.country}"
            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(url, headers=headers)
            if response.status_code == 200 and "<title>" in response.text:
                title_start = response.text.find("<title>") + 7
                title_end = response.text.find("</title>", title_start)
                title = response.text[title_start:title_end].replace(" - Apps on Google Play", "")
                return {
                    "app_id": info.app_id,
                    "store": "google",
                    "title": title.strip(),
                    "status": "Success (basic scrape)"
                }
            return {"status": "App not found on Play Store", "app_id": info.app_id}
        except Exception as e:
            return {"status": f"Error fetching Play Store data: {str(e)}", "app_id": info.app_id}

    return {"status": "Unsupported store. Use 'apple' or 'google'."}

@app.post("/suggest-competitors")
def suggest_competitors(info: AppInfo):
    url = f"https://api.apptweak.com/api/public/apps/ios/{info.app_id}/competitors.json?country={info.country}"
    headers = {"X-Apptweak-Key": APPTWEAK_API_KEY}
    response = requests.get(url, headers=headers)
    return response.json()

@app.post("/keywords")
def keyword_analysis(info: AppInfo):
    headers = {"X-Apptweak-Key": APPTWEAK_API_KEY}
    all_keywords = []
    for app_id in [info.app_id] + info.competitors:
        url = f"https://api.apptweak.com/api/public/apps/ios/{app_id}/keywords/suggestions.json?country={info.country}"
        response = requests.get(url, headers=headers)
        data = response.json()
        if "content" in data:
            all_keywords += data["content"].get("keywords", [])
    return {"app_id": info.app_id, "keywords": list(set(all_keywords)), "status": "Keyword analysis success"}

@app.post("/generate-metadata")
def generate_metadata(info: AppInfo):
    prompt = f"""
You are an ASO expert. Write ASO metadata for an app with the following inputs:
App ID: {info.app_id}
Store: {info.app_store}
Target Country: {info.country}
Target Keywords: {', '.join(info.keywords)}

Return:
1. Title (max 30 characters)
2. Subtitle (max 30 characters)
3. Long Description (max 4000 characters) in markdown with emoji and feature list.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return {"metadata": response["choices"][0]["message"]["content"], "status": "Generated by ChatGPT"}